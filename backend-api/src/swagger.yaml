openapi: 3.0.0
info:
  title: API Rest Clientes
  description: API Rest
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /customer-autenticate:
    get:
      description: Testa se o token do usuário é válido
      summary: Testa se o token do usuário é válido
      tags: 
        - Users
      security: [{bearerAuth: []}]
      responses:
        '200':
          description: Resposta bem-sucedida
          content:
            application/json:
              example: { "ok": true }
        '401':
          description: Não autorizado
          content:
            application/json:
              example: { "error": "Token inválido ou expirado" }  

  /customer-register:
    post:
      description: Criar um novo cliente
      summary: Criar um novo cliente
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            example:
              nome: "Nome do Cliente"
              email: "cliente@example.com"
              CPF: "123.456.789-01"
              telefone: "(11) 98765-4321"
              usuario: "nome_usuario"
              senha: "senha123"
              confirm_senha: "senha123"
      responses:
        '200':
          description: Cliente criado com sucesso
          content:
            application/json:
              example:
                customer:
                  id: 1
                  nome: "Nome do Cliente"
                  email: "cliente@example.com"
                  CPF: "123.456.789-01"
                  telefone: "(11) 98765-4321"
                  usuario: "nome_usuario"
        '400':
          description: Erro de solicitação inválida
          content:
            application/json:
              example: { "error": "Preencha todos os campos" }
        '401':
          description: Erro de autenticação
          content:
            application/json:
              example: { "error": "Credenciais inválidas" }
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              example: { "error": "Erro no servidor" }

  /customer-login:
    post:
      description: Autenticar um usuário
      summary: Autenticar um usuário
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            example:
              usuario: "nome_usuario"
              senha: "senha123"
      responses:
        '200':
          description: Autenticação bem-sucedida
          content:
            application/json:
              example:
                accessToken: "jwt_token"
                refreshToken: "jwt_refresh_token"
        '400':
          description: Erro de solicitação inválida
          content:
            application/json:
              example: { "error": "Usuário e senha são obrigatórios" }
        '401':
          description: Erro de autenticação
          content:
            application/json:
              example: { "error": "Usuário não encontrado" }
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              example: { "error": "Erro no servidor" }

  /refresh-token:
    post:
      description: Renovar o token de acesso
      summary: Renovar o token de acesso
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            example:
              refreshToken: "jwt_refresh_token"
      responses:
        '200':
          description: Token renovado com sucesso
          content:
            application/json:
              example:
                accessToken: "novo_jwt_token"
                refreshToken: "novo_jwt_refresh_token"
        '400':
          description: Erro de solicitação inválida
          content:
            application/json:
              example: { "error": "Refresh token inválido ou não fornecido" }
        '401':
          description: Não autorizado
          content:
            application/json:
              example: { "error": "Refresh token expirado ou não corresponde ao usuário" }
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              example: { "error": "Erro no servidor" }

  /cars-register:
    post:
      description: Cadastrar novo carro
      summary: Cadastrar novo carro
      tags: 
        - Cars
      security: [{bearerAuth: []}]
      requestBody:
        required: true
        content:
          application/json:
            example:
              modelo: "Gol Special 1.0 2000"
              marca: "Volkswagen"
              n_marchas: "6"
              preco: "10.000 R$"
      responses:
        '200':
          description: Carro cadastrado com sucesso
          content:
            application/json:
              example:
                car:
                  id: 1 
                  modelo: "Gol Special 1.0 2000"
                  marca: "Volkswagen"
                  n_marchas: "6"
                  preço: "10.000 R$"    
        '400':
          description: Preencha todos os campos
        '401':
          description: Não autorizado
          content:
            application/json:
              example: { "error": "Token inválido ou expirado" } 
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              example: { "error": "Erro no servidor" }
  /cars-colsultLALL:
    get:
      description: Retorna todos os carros cadastrados
      summary: Retorna todos os carros cadastrados
      tags: 
        - Cars
      security: [{bearerAuth: []}]
      responses:
        '200':
          description: Resposta bem-sucedida
          content:
            application/json:
              example: { "ok": true }
        '401':
          description: Não autorizado
          content:
            application/json:
              example: { "error": "Token inválido ou expirado" }
  /cars-delete/{id}:
    delete:
      description: Deleta o carro equivalente ao id informado
      summary: Deleta o carro equivalente ao id informado
      tags: 
        - Cars
      security: [{bearerAuth: []}]
      parameters: 
        - name: id
          in: path
          required: true
          description: O id do carro que deve ser excluido
          schema:
            type: string
            minimum: 1 
      responses:
        '200':
          description: Carro excluído com sucesso.
          content:
            application/json:
              example: Carro excluído com sucesso
        '404': 
          description: Carro não encontrado.
          content:
            application/json:
              example: O carro cujo o id se refere não foi encontrado
        '500': 
          description: Erro no servidor ao excluir carro.
          content:
            application/json:
              example: Erro no servidor ao tentar excluir carro
  /cars-upadate/{id}:
    put:
      description: Altera o carro que tiver o id informado
      summary: Altera o carro que tiver o id informado
      tags: 
        - Cars
      security: [{bearerAuth: []}]
      parameters: 
        - name: id
          in: path
          required: true
          description: O id do carro que deve ser alterado
          schema:
            type: string
            minimum: 1 
      requestBody:
        required: true
        content:
          application/json:
            example:
              modelo: "Gol Special 1.2 2020"
              marca: "Volkswagen"
              n_marchas: "6"
              preco: "32.000 R$"
      responses:
        '200':
          description: Carro alterado com sucesso.
          content:
            application/json:
              example:
                car:
                  id: 1 
                  modelo: "Gol Special 1.2 2020"
                  marca: "Volkswagen"
                  n_marchas: "6"
                  preço: "32.000 R$"   
        '404': 
          description: Carro não encontrado.
          content:
            application/json:
              example: O carro cujo o id se refere não foi encontrado
        '500': 
          description: Erro no servidor ao alterar carro.
          content:
            application/json:
              example: Erro no servidor ao tentar alterar o carro
